import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { trpc } from "../utils/trpc";
import { Button } from "@carbon/react";
import { getSession, useSession } from "next-auth/react";
import Router from "next/router";
import { Modal, Nav } from "../components";

const Home: NextPage = () => {
  const { status, data } = useSession();
  const drafts = trpc.useQuery([
    "post.draft.getOpenDrafts",
    { userId: status === "authenticated" ? data.user?.id : null },
  ]);
  // const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);

  // trpc.useQuery("post.getPost", {
  //   onSuccess(data) {
  //     console.log(data);
  //   },
  // })

  const postListQuery = trpc.useQuery(["post.getPostsList"], {
    onSuccess(data) {
      console.log(data);
    },
  });

  function handleDraftClick(postId: string) {
    Router.push(`/draft/${postId}`);
  }

  function handlePostClick(postId: string) {
    Router.push(`/${postId}`);
  }

  // Modal start
  const [isModalOpen, setIsModelOpen] = useState(false);
  const [resolve, setResolve] = useState<() => () => void>(() => () => {
    console.error("No resolve function set");
  });
  const [reject, setReject] = useState<() => () => void>(() => () => {
    console.error("No reject function set");
  });
  const mutateRemoveDraft = trpc.useMutation("post.draft.removeDraft");
  async function handleDeleteDraft(postId: string) {
    const modalChoice = await new Promise((resolve, reject) => {
      setResolve(() => () => {
        resolve("confirmed");
      });
      setReject(() => () => {
        reject("rejected");
      });
      setIsModelOpen(true);
    }).then(function (res) {
      setResolve(() => () => {
        console.error("No resolve function set");
      });
      setReject(() => () => {
        console.error("No reject function set");
      });
      return res;
    });
    console.log(modalChoice);

    if (modalChoice === "confirmed") {
      mutateRemoveDraft.mutate(
        { postId: postId },
        {
          onSuccess() {
            drafts.refetch();
          },
        }
      );
    }
  }

  useEffect(() => {
    console.log(resolve);
    console.log(reject);
  }, [resolve, reject]);

  // Modal end

  const mutateNewPost = trpc.useMutation(["post.draft.new"], {
    onSuccess(data) {
      Router.push(`/draft/${data.id}`);
    },
  });

  function formatDate(date: Date) {
    return new Date(date).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  }

  function handleLogin() {
    Router.push("/api/auth/signin");
  }

  return (
    <>
      <Head>
        <title>Posts</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal
        isOpen={isModalOpen}
        onClose={() => {
          reject();
          setIsModelOpen(false);
        }}
      >
        <div className="grid grid-cols-2 gap-3">
          <h1 className="col-span-2 text-xl">
            Are you sure you want to delete this draft?
          </h1>
          <button
            className="m-1 grow bg-red-500 p-3 text-white"
            onClick={() => resolve()}
          >
            Yes
          </button>
          <button
            className="m-1 grow bg-gray-500 p-3 text-white"
            onClick={() => reject()}
          >
            No
          </button>
        </div>
      </Modal>

      <main className="grid grid-cols-1 gap-3">
        <Nav />
        <section className="flex w-full flex-col">
          {status === "authenticated" ? (
            <>
              <div className="flex w-fit gap-2 place-self-center truncate text-3xl">
                Open Drafts
                <img
                  src="https://cdn.svgapi.com/vector/56298/add.svg"
                  alt="add"
                  className="w-8 cursor-pointer"
                  onClick={() => mutateNewPost.mutate()}
                />
              </div>
              <div className="flex w-full flex-wrap place-content-center">
                {drafts.data?.map((draft) => (
                  <div
                    onClick={() => {
                      console.info(draft.id);
                      handleDraftClick(draft.id);
                    }}
                    key={draft.id}
                    className="m-2 flex w-full flex-col items-center rounded-xl p-2 align-middle shadow-lg hover:cursor-pointer sm:w-80"
                  >
                    <img
                      onClick={(e) => {
                        e.stopPropagation();
                        console.info(draft.id);
                        handleDeleteDraft(draft.id);
                      }}
                      src="https://cdn.svgapi.com/vector/109800/close.svg"
                      className="absolute w-6 place-self-end"
                    />
                    {/* <a href="" className="absolute place-self-end">delete</a> */}

                    <h1 className="flex w-full place-content-center truncate">
                      {draft.titleDraft ? draft.titleDraft : "No Title"}
                    </h1>
                    <div className="flex flex-col place-content-center">
                      <span>created: {formatDate(draft.createdAt)}</span>
                      <span>last update:{formatDate(draft.updatedAt)}</span>
                    </div>
                  </div>
                ))}
              </div>
            </>
          ) : null}
        </section>
        <section className="flex w-full flex-col">
          <h1 className="w-fit place-self-center truncate text-3xl">Configs</h1>

          <div className="flex w-full flex-wrap place-content-center">
            {postListQuery.data?.map((post) => (
              <div
                onClick={() => handlePostClick(post.id)}
                className="m-2 flex w-full flex-col items-center rounded-xl p-2 align-middle shadow-lg hover:cursor-pointer sm:w-80"
                key={post.id}
              >
                <h2 className="w-full truncate text-4xl">{post.title}</h2>
                <img
                  className="aspect-video object-cover"
                  alt="tumbnail"
                  src={post.photo[0]?.url}
                />
                <div className="flex w-full place-content-evenly truncate">
                  <span className="truncate">{post.user.name}</span> |{" "}
                  <span className="truncate">{formatDate(post.updatedAt)}</span>
                </div>
              </div>
            ))}
          </div>
        </section>
      </main>
    </>
  );
};

export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};

// const FileSender = () => {
//   // const [fileName, setFileName] = useState<string>("");
//   // const link = trpc.useQuery(["signedPutLink", { name: fileName }]);
//   const submitHandeler = async function (e) {
//     e.preventDefault();
//     console.log(e);

//     const file = new FormData(e.target).get("file");
//     // link.mutate({ files: file.name });
//   }

//   return (
//     <form action="" onSubmit={submitHandeler}>
//       <input type="file" name="file" id="" />
//       <button type="submit">send</button>
//       {/* <a>{link.data}</a> */}
//     </form>
//   )
// }
